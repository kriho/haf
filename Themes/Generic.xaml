<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:HAF.Converters"
                    xmlns:local="clr-namespace:HAF"
                    xmlns:controls="clr-namespace:HAF.Controls">

    <!-- this style must be explixitly used since styles are not implicetly used for derviced types -->

    <!-- this style must be explixitly used since styles are not implicetly used for derviced types -->
    <Style x:Key="ChromeWindowStyle" TargetType="{x:Type controls:ChromeWindow}">
        <Setter Property="WindowStyle" Value="ThreeDBorderWindow"/>
        <Setter Property="Background" Value="{DynamicResource ThemeControlBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ThemeLightBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ThemeTextBrush}"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="False"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="28" CornerRadius="0" ResizeBorderThickness="5" GlassFrameThickness="0"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ChromeWindow}">
                    <Border x:Name="PART_Border" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="28"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <DockPanel Margin="5,1,5,0">
                                <Image Source="{TemplateBinding TitleIcon}" MaxHeight="24" MaxWidth="24"/>
                                <TextBlock Text="{TemplateBinding Title}" Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}" VerticalAlignment="Center" Margin="5,0"/>
                                <Button x:Name="PART_Close" DockPanel.Dock="Right" WindowChrome.IsHitTestVisibleInChrome="True" Focusable="False">
                                    <Button.Style>
                                        <Style TargetType="Button">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="Button">
                                                        <Border x:Name="Border" Background="Transparent" BorderThickness="0" SnapsToDevicePixels="true">
                                                            <Path x:Name="Path" Width="38" Height="28" Data="M 14,9 23,18 M 14,18 23,9" Stroke="{DynamicResource ThemeTextBrush}" StrokeThickness="1"/>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="true">
                                                                <Setter Property="Stroke" TargetName="Path" Value="White"/>
                                                                <Setter Property="Background" TargetName="Border" Value="#FFD71526"/>
                                                            </Trigger>
                                                            <Trigger Property="IsPressed" Value="true">
                                                                <Setter Property="Stroke" TargetName="Path" Value="White"/>
                                                                <Setter Property="Background" TargetName="Border" Value="#FFD71526"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Button.Style>
                                </Button>
                                <Button x:Name="PART_Maximize" DockPanel.Dock="Right" WindowChrome.IsHitTestVisibleInChrome="True" Focusable="False">
                                    <Button.Style>
                                        <Style TargetType="Button">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="Button">
                                                        <Border x:Name="Border" Background="Transparent" BorderThickness="0" SnapsToDevicePixels="true">
                                                            <Path x:Name="Path" Width="38" Height="28" Data="M 14.5,8.5 H 23.5 V 17.5 H 14.5 Z" Stroke="{DynamicResource ThemeTextBrush}" StrokeThickness="1"/>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="true">
                                                                <Setter Property="Stroke" TargetName="Path" Value="{DynamicResource ThemeInvertedTextBrush}"/>
                                                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource ThemeActionBrush}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsPressed" Value="true">
                                                                <Setter Property="Stroke" TargetName="Path" Value="{DynamicResource ThemeInvertedTextBrush}"/>
                                                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource ThemeActionBrush}"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Button.Style>
                                </Button>
                                <Button x:Name="PART_Restore" DockPanel.Dock="Right" Visibility="Collapsed" WindowChrome.IsHitTestVisibleInChrome="True" Focusable="False">
                                    <Button.Style>
                                        <Style TargetType="Button">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="Button">
                                                        <Border x:Name="Border" Background="Transparent" BorderThickness="0" SnapsToDevicePixels="true">
                                                            <Path x:Name="Path" Width="38" Height="28" Data="M 14.5,10.5 H 21.5 V 17.5 H 14.5 Z M 16.5,10.5 V 8.5 H 23.5 V 15.5 H 21.5" Stroke="{DynamicResource ThemeTextBrush}" StrokeThickness="1"/>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="true">
                                                                <Setter Property="Stroke" TargetName="Path" Value="{DynamicResource ThemeInvertedTextBrush}"/>
                                                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource ThemeActionBrush}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsPressed" Value="true">
                                                                <Setter Property="Stroke" TargetName="Path" Value="{DynamicResource ThemeInvertedTextBrush}"/>
                                                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource ThemeActionBrush}"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Button.Style>
                                </Button>
                                <Button x:Name="PART_Minimize" DockPanel.Dock="Right" WindowChrome.IsHitTestVisibleInChrome="True" Padding="0" BorderThickness="0" Focusable="False">
                                    <Button.Style>
                                        <Style TargetType="Button">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="Button">
                                                        <Border x:Name="Border" Background="Transparent" BorderThickness="0" SnapsToDevicePixels="true">
                                                            <Path x:Name="Path" Width="38" Height="28" Data="M 14,15 H 24" Stroke="{DynamicResource ThemeTextBrush}" StrokeThickness="1"/>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="true">
                                                                <Setter Property="Stroke" TargetName="Path" Value="{DynamicResource ThemeInvertedTextBrush}"/>
                                                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource ThemeActionBrush}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsPressed" Value="true">
                                                                <Setter Property="Stroke" TargetName="Path" Value="{DynamicResource ThemeInvertedTextBrush}"/>
                                                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource ThemeActionBrush}"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Button.Style>
                                </Button>
                                <ContentPresenter Content="{TemplateBinding Header}"/>
                            </DockPanel>
                            <ContentPresenter Grid.Row="1" Margin="1,0,1,1"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="PART_Border" Property="Padding" Value="7"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:FormRow}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:FormRow}">
                    <Grid Margin="{TemplateBinding Margin}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Header"/>
                            <ColumnDefinition Width="1*"/>
                        </Grid.ColumnDefinitions>
                        <Border BorderThickness="1,1,0,1" BorderBrush="{DynamicResource ThemeLightBrush}">
                            <StackPanel VerticalAlignment="Center">
                                <ContentPresenter Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}"/>
                                <TextBlock Text="{TemplateBinding Description}" Foreground="{DynamicResource ThemeSecondaryBrush}" TextWrapping="Wrap" FontSize="13" Margin="5,0" Visibility="{TemplateBinding Description, Converter={converters:IsNullToVisibilityConverter Inverted=True}}"/>
                            </StackPanel>
                        </Border>
                        <StackPanel Grid.Column="1">
                            <Border Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                                <ContentPresenter x:Name="PART_Presenter" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                            </Border>
                            <Border BorderThickness="1,0,1,1" BorderBrush="{TemplateBinding BorderBrush}" Padding="3" Visibility="{Binding ElementName=PART_Presenter, Path=Content.(Validation.HasError), Converter={converters:BooleanToVisibilityConverter}}">
                                <ItemsControl ItemsSource="{Binding ElementName=PART_Presenter, Path=Content.(Validation.Errors)}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding ErrorContent}" Foreground="{DynamicResource ThemeTextErrorBrush}" />
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </Border>
                        </StackPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}" Margin="5,0" Foreground="{DynamicResource ThemeTextBrush}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ThemeStrongBrush}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0,0,0,3"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
    </Style>

    <Style TargetType="{x:Type controls:FormGroup}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:FormGroup}">
                    <StackPanel Margin="0,0,0,3">
                        <Border BorderThickness="1,1,1,0" BorderBrush="{DynamicResource ThemeLightBrush}">
                            <StackPanel Margin="0,0,0,2">
                                <ContentPresenter Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}"/>
                                <TextBlock Text="{TemplateBinding Description}" Foreground="{DynamicResource ThemeSecondaryBrush}" TextWrapping="Wrap" FontSize="13" Margin="5,0" Visibility="{TemplateBinding Description, Converter={converters:IsNullToVisibilityConverter Inverted=True}}"/>
                            </StackPanel>
                        </Border>
                        <Border Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                            <ContentPresenter x:Name="PART_Presenter" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        </Border>
                        <Border BorderThickness="1,0,1,1" BorderBrush="{DynamicResource ThemeLightBrush}" Padding="3" Visibility="{Binding ElementName=PART_Presenter, Path=Content.(Validation.HasError), Converter={converters:BooleanToVisibilityConverter}}">
                            <ItemsControl ItemsSource="{Binding ElementName=PART_Presenter, Path=Content.(Validation.Errors)}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding ErrorContent}" Foreground="{DynamicResource ThemeTextErrorBrush}" />
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </Border>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}" Margin="5,0" Foreground="{DynamicResource ThemeTextBrush}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ThemeStrongBrush}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
    </Style>

    <Style TargetType="{x:Type controls:FormEntry}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:FormEntry}">
                    <StackPanel Margin="{TemplateBinding Margin}">
                        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Margin="0,0,0,3" Padding="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="PART_Presenter" Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        </Border>
                        <Border BorderThickness="1,0,1,1" BorderBrush="{DynamicResource ThemeLightBrush}" Padding="3" Visibility="{Binding ElementName=PART_Presenter, Path=Content.(Validation.HasError), Converter={converters:BooleanToVisibilityConverter}}">
                            <ItemsControl ItemsSource="{Binding ElementName=PART_Presenter, Path=Content.(Validation.Errors)}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding ErrorContent}" Foreground="{DynamicResource ThemeTextErrorBrush}" />
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </Border>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ThemeStrongBrush}"/>
        <Setter Property="Margin" Value="0,0,0,3"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
    </Style>

    <Style TargetType="{x:Type controls:FormTitle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:FormTitle}">
                    <StackPanel Margin="{TemplateBinding Margin}">
                        <TextBlock Text="{TemplateBinding Title}" FontWeight="SemiBold"/>
                        <TextBlock Text="{TemplateBinding Description}" Foreground="{DynamicResource ThemeSecondaryBrush}" FontSize="13" TextWrapping="Wrap" Visibility="{TemplateBinding Description, Converter={converters:IsNullToVisibilityConverter Inverted=True}}"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="6,6,0,5"/>
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
    </Style>

    <Style TargetType="{x:Type controls:Form}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:Form}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                        <AdornerDecorator>
                            <ItemsPresenter Margin="0,0,0,-3"/>
                        </AdornerDecorator>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Vertical" IsItemsHost="True"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource ThemeStrongBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Cycle"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="True"/>
    </Style>

    <Style TargetType="{x:Type controls:ScrollingForm}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:Form}">
                    <AdornerDecorator>
                        <ScrollViewer BorderBrush="{TemplateBinding BorderBrush}" HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </AdornerDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Vertical" IsItemsHost="True"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource ThemeStrongBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="3,3,3,0"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Cycle"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="True"/>
    </Style>

    <Style TargetType="{x:Type controls:GeometryIcon}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:GeometryIcon}">
                    <Viewbox Visibility="{TemplateBinding Geometry, Converter={converters:IsNullToVisibilityConverter Inverted=True}}">
                        <Canvas Width="{TemplateBinding GeometryWidth}" Height="{TemplateBinding GeometryHeight}" Background="{TemplateBinding Background}">
                            <Path x:Name="PART_Path" Fill="{TemplateBinding Foreground}" Data="{TemplateBinding Geometry}" />
                        </Canvas>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UseSecondaryForeground" Value="True">
                            <Setter TargetName="PART_Path" Property="Fill" Value="{Binding SecondaryForeground, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="20"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="GeometryWidth" Value="24"/>
        <Setter Property="GeometryHeight" Value="24"/>
        <Setter Property="UseSecondaryForeground" Value="False"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style TargetType="{x:Type controls:GeometryButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:GeometryButton}">
                    <Grid>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"/>
                        <Rectangle Fill="{TemplateBinding Background}"/>
                        <StackPanel Orientation="Horizontal" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}">
                            <controls:GeometryIcon x:Name="PART_Icon" Foreground="{DynamicResource ThemeSecondaryBrush}" Geometry="{TemplateBinding Geometry}"/>
                            <ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding Content}"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Icon" Property="Foreground" Value="{DynamicResource ThemeControlBrush}"/>
                            <Setter TargetName="PART_ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ThemeBackgroundBrush}"/>
                            <Setter Property="Background" Value="{DynamicResource ThemeActionBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True"/>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ThemeAccentBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Icon" Property="Foreground" Value="{DynamicResource ThemeStrongBrush}"/>
                            <Setter TargetName="PART_ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ThemeSecondaryBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource ThemeStrongBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{DynamicResource ThemeTextBrush}"/>
    </Style>

    <Style TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{DynamicResource ThemeTextBrush}"/>
    </Style>

    <Style TargetType="Button">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyle}"/>
        <Setter Property="Foreground" Value="{DynamicResource ThemeTextBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ThemeStrongBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="local:Behavior.SecondaryForeground" Value="{DynamicResource ThemeSecondaryBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ThemeActionBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource ThemeInvertedTextBrush}"/>
                            <Setter Property="local:Behavior.SecondaryForeground" Value="{DynamicResource ThemeInvertedSecondaryBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ThemeActionBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ThemeActionBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="{DynamicResource ThemeDisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="controls:HelpButton">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyle}"/>
        <Setter Property="Foreground" Value="{DynamicResource ThemeTextBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ThemeStrongBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="local:Behavior.SecondaryForeground" Value="{DynamicResource ThemeSecondaryBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ThemeActionBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource ThemeInvertedTextBrush}"/>
                            <Setter Property="local:Behavior.SecondaryForeground" Value="{DynamicResource ThemeInvertedSecondaryBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ThemeActionBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ThemeActionBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="{DynamicResource ThemeDisabledOpacity}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:TextBoxBlock}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:TextBoxBlock}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <TextBox Text="{TemplateBinding Text}" TextWrapping="{TemplateBinding TextWrapping}" IsReadOnly="True" Background="Transparent" Padding="{TemplateBinding Padding}" Cursor="Arrow" Foreground="{TemplateBinding Foreground}" BorderThickness="0"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="3,2"/>
        <Setter Property="Foreground" Value="{DynamicResource ThemeSecondaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ThemeStrongBrush}"/>
    </Style>

    <!-- Validation ############################################################################################################### -->

    <Style x:Key="ValidationTooltip" TargetType="TextBox">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>